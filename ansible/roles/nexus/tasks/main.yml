---
# tasks file for ansible-nexus
- name: Download nexus_package 
  get_url: url=http://download.sonatype.com/nexus/oss/{{ nexus_package }} dest="{{ nexus_download_dir }}/{{ nexus_package }}"
  tags: download
  sudo: no

- name: Ensure Nexus o/s group exists
  group: name="{{ nexus_os_group }}" state=present
  when: nexus_create_os_group
  sudo: true

- name: Ensure Nexus o/s user exists
  user: name="{{ nexus_os_user }}" group="{{ nexus_os_group }}" shell="{{ nexus_os_user_shell }}" state=present
  when: nexus_create_os_user
  sudo: true

- name: Ensure Nexus installation directory exists
  file:
    path="{{ nexus_installation_dir }}"
    state="directory"
  sudo: true

- name: Unpack Nexus download
  unarchive:
    src="{{ nexus_download_dir }}/{{ nexus_package }}"
    dest="{{ nexus_installation_dir }}"
    creates="{{ nexus_installation_dir }}/nexus-{{ nexus_version }}"
    force=no
    copy=false
    owner={{ nexus_os_user }}
    group={{ nexus_os_group }}
    mode="0755"
  tags: unpack

- name: Update symlink nexus-latest
  shell: ln -fs `ls -d {{ nexus_installation_dir }}/nexus-*|tail -1` {{ nexus_installation_dir }}/nexus-latest

- name: Install createrepo for nexus-yum-repository-plugin
  yum: name=createrepo state=installed
  when: ansible_os_family == "RedHat"

- name: Check if sonatype working directory exists
  stat: path="{{ nexus_installation_dir }}/sonatype-work"
  register: s_w

- name: Move existing sonatype working directory into specified working dir
  command: mv "{{ nexus_installation_dir }}/sonatype-work" "{{ nexus_working_dir }}"
  when: s_w.stat.exists

- name: Set permissions and ownership on Nexus installation directory
  file:
    path={{ nexus_installation_dir }}/{{ nexus_package }}
    state="directory"
    owner="{{ nexus_os_user }}"
    group="{{ nexus_os_group }}"
    mode="0755"
    recurse=true

- name: Set permissions and ownership on Nexus work directory
  file:
    path={{ nexus_working_dir }}
    state="directory"
    owner="{{ nexus_os_user }}"
    group="{{ nexus_os_group }}"
    mode="0755"
    recurse=true

- name: Set permissions and ownership on Nexus logs directory
  file:
    path={{ nexus_installation_dir }}/nexus-latest/logs
    owner="{{ nexus_os_user }}"
    group="{{ nexus_os_group }}"
    state=directory

- name: Set permissions and ownership on Nexus tmp directory
  file:
    path={{ nexus_installation_dir }}/nexus-latest/tmp
    owner="{{ nexus_os_user }}"
    group="{{ nexus_os_group }}"
    state=directory

- name: Set permissions and ownership on Nexus pid directory
  file:
    path=/var/run/nexus
    owner="{{ nexus_os_user }}"
    group="{{ nexus_os_group }}"
    state=directory

- name: Configure port in nexus.properties
  lineinfile:
    dest="{{ nexus_installation_dir }}/nexus-{{ nexus_version }}/conf/nexus.properties"
    line="application-port={{ nexus_port }}"
    regexp="application-port=.*"
    state=present
  notify:
    - 'restart nexus'

- name: Configure workdir in nexus.properties
  lineinfile:
    dest="{{ nexus_installation_dir }}/nexus-{{ nexus_version }}/conf/nexus.properties"
    line="nexus-work={{ nexus_working_dir }}"
    regexp="nexus-work=.*"
    state=present
  notify:
    - 'restart nexus'

- name: Symlink nexus bin.
  file:
    src="{{ nexus_installation_dir }}/nexus-{{ nexus_version }}/bin/nexus"
    dest="/usr/bin/nexus"
    state=link
  register: nexus_symlink


  #- name: Add nexus as init script for service management.
  #  file:
  #  src="{{ nexus_installation_dir }}/nexus-{{ nexus_version }}/bin/nexus"
  #  dest="/etc/init.d/nexus"
  #  state=link
  #when: "ansible_service_mgr != 'systemd'"

- name: Copy Nexus systemd unit file into place (for systemd systems).
  template:
    src: nexus.service.j2
    dest: /etc/systemd/system/nexus.service
    owner: root
    group: root
    mode: 0755
  when: "ansible_service_mgr == 'systemd'"

- name: restart service nexus and issue daemon-reload to pick up config changes
  systemd:
    state: restarted
    daemon_reload: yes
    name: nexus

    #- name: Ensure nexus is running and set to start on boot.
    #  service: name=nexus state=started enabled=yes

- name: Allow nexus time to build on first start.
  pause: seconds=180
  when: nexus_symlink.changed
  tags: ['skip_ansible_lint']

- name: Make sure nexus is responding on the configured port.
  wait_for: port=" {{ nexus_port}} " delay=3 timeout=300



